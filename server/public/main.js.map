{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/animals/animals.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/messages/messages.component.html","webpack:///./src/app/animals/animals.component.css","webpack:///./src/app/animals/animals.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/messages/messages.component.css","webpack:///./src/app/messages/messages.component.ts","webpack:///./src/app/services/animal.service.ts","webpack:///./src/app/services/message.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<select class = 'select'\\n    (change) = 'onChange( animalDropdown.value )'\\n    #animalDropdown>\\n    <option class = 'option'\\n        *ngFor = 'let a of animals; let i = index'\\n        [class.selected] = 'isSelected( a )'\\n        [value] = 'i'>\\n        {{ a.name }}\\n    </option>\\n</select>\"","module.exports = \"<h1>\\n  Welcome to the {{ title }}!\\n</h1>\\n\\n<div class = 'app-root'>\\n  <!--Displays animal description and changes on dropdown-->\\n  <p> {{ animalDescription }} </p>\\n  <!--Fills dropdown with server data-->\\n  <animals\\n    [animals] = 'animals'\\n    (onAnimalSelected) = 'animalSelected($event)'>\\n  </animals>\\n  <!--Adding animal form-->\\n  <form [formGroup] = \\\"addform\\\">\\n    <h3> Add an Animal: </h3>\\n    <!--Name Input for form-->\\n    <mat-form-field class = 'field'>\\n      <input name = 'name' #newName formControlName = \\\"name\\\"\\n        matInput placeholder = \\\"Type a Name\\\" required>\\n        <mat-error *ngIf = \\\"addform.invalid\\\">{{ getErrorMessage( addform, 'name' ) }}</mat-error>\\n    </mat-form-field>\\n    <br>\\n    \\n    <!--Color Input for form-->\\n    <div class = 'field'>\\n      <select name = 'color' #newColor formControlName = \\\"color\\\">\\n        <option\\n          [value] = '' selected disabled hidden> Choose a color </option>\\n        <option\\n          *ngFor = 'let c of colorOptions;'\\n          [value] = 'c'> {{ c }}\\n        </option>\\n      </select>\\n    </div>\\n    <br>\\n\\n    <!--Size Input for form-->\\n    <div class = 'field'>\\n      <select name = 'size' #newSize formControlName = \\\"size\\\">\\n        <option\\n          [value] = '' selected disabled hidden> Choose a size </option>\\n        <option\\n          *ngFor = 'let s of sizeOptions;'\\n          [value] = 's'> {{ s }}\\n        </option>\\n      </select>\\n    </div>\\n\\n    <!--Date Input for form-->\\n    <mat-form-field>\\n      <input matInput [matDatepicker] = 'newDob' placeholder = 'Choose a birth date' formControlName = \\\"date\\\" required>\\n      <mat-error *ngIf = \\\"addform.invalid\\\">{{ getErrorMessage( addform, 'date' ) }}</mat-error>\\n      <mat-datepicker-toggle matSuffix [for] = 'newDob'></mat-datepicker-toggle>\\n      <mat-datepicker #newDob></mat-datepicker>\\n    </mat-form-field>\\n    <br>\\n\\n    <!--Submit button for form and reset values-->\\n    <div>\\n      <button class = 'button' type = 'button' (click) =\\n        \\\"add(newName.value, newColor.value, newSize.value, newDob._validSelected);\\\">\\n        Add\\n      </button>\\n    </div>\\n  </form>\\n\\n  <!--Displaying table for animal database-->\\n  <h3 class='ui header'> Animal Database: </h3>\\n  <table>\\n    <!--Headers-->\\n    <th> Name </th>\\n    <th> Color </th>\\n    <th> Size </th>\\n    <th> Date of Birth </th>\\n\\n    <!--Data-->\\n    <tr *ngFor = 'let a of animals; let i = index'>\\n      <td>{{ a.name }}</td>\\n      <td>{{ a.color }}</td>\\n      <td>{{ a.size }}</td>\\n      <td>{{ dateFormatter(a.dob) }}</td>\\n      <!--Delete button-->\\n      <td>\\n        <button class = 'button' type = 'button' (click) = \\\"delete(a);\\\">\\n          Delete\\n        </button>\\n      </td>\\n\\n      <!--Update button-->\\n      <td>\\n        <!--For showing and hiding update form-->\\n        <div *ngIf = \\\"a.expanded\\\">\\n\\n          <!--Form to update animal-->\\n          <form [formGroup] = \\\"form\\\">\\n\\n          <!--Name-->\\n          <mat-form-field class = 'field'>\\n            <input name = 'upName' #upName formControlName = \\\"name\\\"\\n              matInput placeholder = \\\"Type a Name\\\" required>\\n              <mat-error *ngIf = \\\"addform.invalid\\\">{{ getErrorMessage( form, 'name' ) }}</mat-error>\\n          </mat-form-field>\\n          <br>\\n\\n          <!--Color-->\\n          <div class = 'field'>\\n            <select name = 'upColor' #upColor formControlName = \\\"color\\\">\\n              <option\\n                *ngFor = 'let c of colorOptions;'\\n                [value] = 'c'> {{ c }}\\n              </option>\\n            </select>\\n          </div>\\n          <br>\\n\\n          <!--Size-->\\n          <div class = 'field'>\\n            <select name = 'upSize' #upSize formControlName = \\\"size\\\">\\n              <option\\n                *ngFor = 'let s of sizeOptions;'\\n                [value] = 's'> {{ s }}\\n              </option>\\n            </select>\\n          </div>\\n\\n          <!--Birthday-->\\n          <mat-form-field>\\n            <input matInput [matDatepicker] = 'upDob' placeholder = 'Choose a birth date' formControlName = \\\"date\\\" required>\\n            <mat-error *ngIf = \\\"form.invalid\\\">{{ getErrorMessage( form, 'date' ) }}</mat-error>\\n            <mat-datepicker-toggle matSuffix [for] = 'upDob'></mat-datepicker-toggle>\\n            <mat-datepicker #upDob></mat-datepicker>\\n          </mat-form-field>\\n          <br>\\n\\n          <!--For showing and hiding submit/cancel buttons-->\\n          <div>\\n            <button class = 'btn1' type = 'button'\\n              (click) = \\\"update(upName.value, upColor.value, upSize.value, upDob._validSelected, a)\\\">\\n              Submit\\n            </button>\\n\\n            <button class = 'btn2' type = 'button' (click) = \\\"expandCompareRow(a)\\\">\\n              Cancel\\n            </button>\\n\\n          </div>\\n\\n        </form>\\n        </div>\\n        \\n        <!--For showing and hiding update button-->\\n        <div *ngIf = \\\"!a.expanded\\\">\\n          <button class = 'button' type = 'button' (click) = \\\"expandCompareRow(a); formDefault(a);\\\">\\n              Update\\n          </button>\\n        </div>\\n        \\n      </td>\\n    </tr>\\n  </table>\\n\\n</div>\\n<!--App messages for understanding communication with server-->\\n<app-messages></app-messages>\\n\"","module.exports = \"<div *ngIf = 'messageService.messages.length'>\\n    <h2>Messages</h2>\\n        <button\\n            class = 'clear'\\n            (click) = 'messageService.clear()'>clear</button>\\n        <div\\n            *ngFor = 'let message of messageService.messages'> {{ message }}\\n        </div>\\n      \\n</div>\"","module.exports = \"select {\\n    background-color: #4CAF50;\\n    color: white;\\n    padding: 16px;\\n    font-size: 16px;\\n    border: none;\\n    cursor: pointer;\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYW5pbWFscy9hbmltYWxzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGFBQWE7SUFDYixlQUFlO0lBQ2YsWUFBWTtJQUNaLGVBQWU7RUFDakIiLCJmaWxlIjoic3JjL2FwcC9hbmltYWxzL2FuaW1hbHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInNlbGVjdCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgcGFkZGluZzogMTZweDtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfSJdfQ== */\"","import {\n  Component,\n  EventEmitter,\n  Output,\n  Input,\n  OnInit\n} from '@angular/core';\nimport { Animal } from '../animal.model';\n\n@Component({\n  selector : 'animals',\n  templateUrl : './animals.component.html',\n  styleUrls : ['./animals.component.css']\n})\n\nexport class AnimalsComponent implements OnInit {\n\n  @Input() animals : Animal[];\n  @Output() onAnimalSelected : EventEmitter<Animal>;\n\n  private currentAnimal : Animal;\n\n  constructor() {\n    this.onAnimalSelected = new EventEmitter();\n  }\n\n  ngOnInit() { }\n\n  onChange( animal : Animal ) : void {\n    this.currentAnimal = animal;\n    this.onAnimalSelected.emit( animal );\n  }\n\n  isSelected( animal : Animal ) : boolean {\n    if ( !animal || !this.currentAnimal ) {\n      return false;\n    }\n    return animal.name === this.currentAnimal.name;\n  }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"table, th , td {\\n  padding: 10px;\\n  border-radius: 4px;\\n  font-family: 'Roboto';\\n}\\n\\nh1, h3, p {\\n  font-family: 'Roboto';\\n}\\n\\ntable tr:nth-child(odd) {\\n  background-color: #f1f1f1;\\n}\\n\\ntable tr:nth-child(even) {\\n  background-color: #ffffff;\\n}\\n\\nth {\\n  background-color: #4CAF50;\\n  color: white;\\n}\\n\\nselect {\\n  background-color: #4CAF50;\\n  color: white;\\n  padding: 16px;\\n  font-size: 16px;\\n  border: none;\\n  cursor: pointer;\\n  font-family: 'Roboto';\\n}\\n\\n.button {\\n  background-color: #4CAF50;\\n  border: none;\\n  border-radius: 4px;\\n  color: white;\\n  padding: 15px 32px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  font-size: 16px;\\n  font-family: 'Roboto';\\n}\\n\\n.btn1 {\\n  float: left;\\n  background-color: #4CAF50;\\n  border: none;\\n  border-radius: 4px;\\n  color: white;\\n  padding: 15px 32px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  font-size: 16px;\\n  font-family: 'Roboto';\\n}\\n\\n.btn2 {\\n  float: right;\\n  background-color: #4CAF50;\\n  border: none;\\n  border-radius: 4px;\\n  color: white;\\n  padding: 15px 32px;\\n  text-align: center;\\n  text-decoration: none;\\n  display: inline-block;\\n  font-size: 16px;\\n  font-family: 'Roboto';\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGFBQWE7RUFDYixlQUFlO0VBQ2YsWUFBWTtFQUNaLGVBQWU7RUFDZixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixxQkFBcUI7RUFDckIscUJBQXFCO0VBQ3JCLGVBQWU7RUFDZixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIscUJBQXFCO0VBQ3JCLHFCQUFxQjtFQUNyQixlQUFlO0VBQ2YscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLHlCQUF5QjtFQUN6QixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLHFCQUFxQjtFQUNyQixxQkFBcUI7RUFDckIsZUFBZTtFQUNmLHFCQUFxQjtBQUN2QiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUsIHRoICwgdGQge1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcbn1cblxuaDEsIGgzLCBwIHtcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xufVxuXG50YWJsZSB0cjpudGgtY2hpbGQob2RkKSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWYxZjE7XG59XG5cbnRhYmxlIHRyOm50aC1jaGlsZChldmVuKSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG59XG5cbnRoIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG5zZWxlY3Qge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwO1xuICBjb2xvcjogd2hpdGU7XG4gIHBhZGRpbmc6IDE2cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgYm9yZGVyOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcbn1cblxuLmJ1dHRvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIHBhZGRpbmc6IDE1cHggMzJweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LWZhbWlseTogJ1JvYm90byc7XG59XG5cbi5idG4xIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIHBhZGRpbmc6IDE1cHggMzJweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LWZhbWlseTogJ1JvYm90byc7XG59XG5cbi5idG4yIHtcbiAgZmxvYXQ6IHJpZ2h0O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgY29sb3I6IHdoaXRlO1xuICBwYWRkaW5nOiAxNXB4IDMycHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xufSJdfQ== */\"","import {\n  Component,\n  OnInit\n} from '@angular/core';\nimport { Animal } from './animal.model';\nimport { AnimalService } from './services/animal.service';\nimport { formatDate } from \"@angular/common\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ]\n})\n\nexport class AppComponent implements OnInit {\n  title = 'Animal Database';\n  animalDescription = 'Select an animal to see its description.';\n  //labels for color and size dropdowns\n  defaultColor = \"Choose a color\";\n  defaultSize = \"Choose a size\";\n  //all color options for select dropdown\n  colorOptions = [ 'Black', 'Blue', 'Brown', 'Gray', 'Green', 'Orange', 'Pink', 'Red', 'Violet', 'White', 'Yellow' ];\n  //all size options for select dropdown\n  sizeOptions = [ 'Tiny', 'Small', 'Medium', 'Large', 'Huge' ];\n  animal : Animal;\n  animals : Animal[];\n\n  public addform : FormGroup = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    color: new FormControl(this.defaultColor),\n    size: new FormControl(this.defaultSize),\n    date: new FormControl('', [Validators.required])\n  });\n\n  public form : FormGroup = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    color: new FormControl(''),\n    size: new FormControl(''),\n    date: new FormControl('', [Validators.required])\n  });\n\n  \n  constructor( private animalService : AnimalService ) {\n  }\n  \n  ngOnInit() {\n    //calls the server on init of website\n    this.showAnimals();\n  }\n\n  getErrorMessage( form : FormGroup, field : string ) {\n      return form.get(field).hasError('required') ? 'You must enter a value' :\n      '';\n  }\n\n  formDefault( animal : Animal ) {\n    this.form.setValue({\n      name : animal.name,\n      color : animal.color,\n      size : animal.size,\n      date : new Date(animal.dob)\n    });\n  }\n\n  //gets the animals from the server\n  showAnimals() {\n    this.animalService.getAnimals()\n      .subscribe(( data : Animal[] ) => {\n        this.animals = data;\n      });\n    \n  }\n\n  //formats date into a readable format and converts to a string\n  dateFormatter( dob : Date ) : String {\n    const format = 'MM/dd/yyyy';\n    const locale = 'en-US';\n    if ( dob ) {\n      return formatDate( dob, format, locale );\n    } else {\n      return 'undefined';\n    }\n  }\n\n  //shows description of animal selected by index\n  animalSelected( index : number ) : void {\n    //check if all fields are defined\n    if (!this.animals[ index ].name ||\n      !this.animals[ index ].color ||\n      !this.animals[ index ].size ||\n      !this.animals[ index ].dob) {\n        this.animalDescription = 'One or more of the criteria is undefined.'\n    } else {\n      //setting up the date format for date of birth to be displayed\n      let formattedDate = this.dateFormatter( this.animals[ index ].dob );\n      //writing out the description for the animal that is at index\n      this.animalDescription = `The ${ this.animals[ index ].name.toLocaleLowerCase() }\n        is a ${ this.animals[ index ].color.toLocaleLowerCase() } colored,\n        ${ this.animals[ index ].size.toLocaleLowerCase() } sized animal\n        and was born on ${ formattedDate }.`;\n    }\n  }\n\n  //calls add from service and subscribes\n  add( name : string, color : string, size : string, dob : Date ) : void {\n    //check if all fields are filled out\n    if ( !name || !color || color == this.defaultColor || size == this.defaultSize || !size || !dob ) {\n        alert( 'All fields are required. Please finish filling out the form.' );\n    } else {\n      //add animal to server7\n      this.animalService\n        .addAnimal( { name, color, size, dob } as Animal )\n        .subscribe( animal => {\n          this.animals.push( animal );\n      });\n      this.addform.reset({\n        color: this.defaultColor,\n        size: this.defaultSize\n      });\n    }\n  }\n\n  //calls delete from service and subscribes\n  delete( animal : Animal ) {\n    this.animalService\n      .deleteAnimal( animal._id )\n      .subscribe();\n    this.animals.splice( this.animals.indexOf( animal ), 1 );\n  }\n\n  expandCompareRow(fields) {\n    fields.expanded = ! fields.expanded;\n  }\n\n  //calls update from service and subscribes\n  update( name : string, color : string, size : string, dob : Date, animal : Animal ) {\n    let _id = animal._id;\n    //check if all fields are filled out\n    if ( !name || !color || color == this.defaultColor || size == this.defaultSize || !size || !dob ) {\n      alert( 'All fields are required. Please finish filling out the form or hit cancel.' );\n    } else {\n      this.expandCompareRow( animal );\n      this.animalService\n        .updateAnimal( { _id, name, color, size, dob } as Animal, animal._id )\n        .subscribe();\n      this.animals.splice( this.animals.indexOf( animal ), 1, { _id, name, color, size, dob } as Animal );\n    }\n  }\n}\n\nexport interface Animal {\n  animalUrl : string;\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AnimalsComponent } from './animals/animals.component';\nimport { MessagesComponent } from './messages/messages.component';\nimport { MaterialModule } from './material.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AnimalsComponent,\n    MessagesComponent\n  ],\n  imports: [\n    MaterialModule,\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { MatDatepickerModule,\n        MatNativeDateModule,\n        MatFormFieldModule,\n        MatInputModule } from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  imports: [\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatInputModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatInputModule,\n    BrowserAnimationsModule\n  ],\n  providers: [ MatDatepickerModule ],\n})\n\nexport class MaterialModule {}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lc3NhZ2VzL21lc3NhZ2VzLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../services/message.service';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n\n  constructor( public messageService : MessageService ) { }\n\n  ngOnInit() { }\n}\n","import { Injectable } from '@angular/core';\nimport { Animal } from '../animal.model';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, tap} from 'rxjs/operators';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'  \n})\n\nexport class AnimalService {\n\n  private animalUrl = 'http://localhost:3000/animals';\n\n  constructor(\n    private http : HttpClient,\n    private messageService : MessageService ) { }\n\n  private log(message: string) {\n    this.messageService.add( `AnimalService: ${message}` );\n  }\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return ( error : any ) : Observable<T> => {\n   \n      // TODO: send the error to remote logging infrastructure\n      console.error( error ); // log to console instead\n   \n      // TODO: better job of transforming error for user consumption\n      this.log( `${operation} failed: ${error.message}` );\n   \n      // Let the app keep running by returning an empty result.\n      return of( result as T );\n    };\n  }\n  \n  //getting json data of all animals from the server using get\n  getAnimals() {\n    this.log( `calling getAnimals.` );\n    return this.http.get<Animal[]>(this.animalUrl)\n      .pipe(\n        tap(_ => this.log( 'fetched animals' ) ),\n        catchError( this.handleError<Animal[]>( 'getAnimals', [] ) )\n    );\n  }\n\n  //getting json data of specific animal by id from the server using get\n  getAnimal( id : string ) : Observable<Animal> {\n    const url = `${this.animalUrl}/${id}`;\n    return this.http.get<Animal>(url).pipe(\n      tap(_ => this.log( `fetched animal id=${id}` )),\n      catchError( this.handleError<Animal>( `getAnimal id=${id}` ) )\n    );\n  }\n\n  //add animal to the server using post\n  addAnimal ( animal : Animal ) : Observable<Animal> {\n    return this.http.post<Animal>( this.animalUrl, animal, httpOptions )\n      .pipe(\n        tap(( newAnimal : Animal ) => this.log(`added animal w/ name=${ newAnimal.name }`)),\n        catchError(this.handleError<Animal>( 'addAnimal' ) )\n      );\n  }\n\n  //delete the animal from the server using delete\n  deleteAnimal ( id : string ) : Observable<{}> {\n    const url = `${this.animalUrl}/${id}`;\n    return this.http.delete( url, httpOptions )\n      .pipe(\n        catchError( this.handleError( 'deleteAnimal' ) )\n    );\n  }\n\n  //update the animal on the server, returns the updated animal upon success\n  updateAnimal ( animal : Animal, id : string ) : Observable<Animal> {\n    const url = `${this.animalUrl}/${id}`;\n    return this.http.put<Animal>( url, animal, httpOptions )\n      .pipe(\n        catchError( this.handleError( 'updateAnimal', animal ) )\n    );\n}\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class MessageService {\n  messages : string[] = [];\n  \n  add( message : string ) {\n    this.messages.push( message );\n  }\n\n  clear() {\n    this.messages = [];\n  }\n  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}